AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: City Checkout API Lambda

Resources:
  NetWorthLambdaRole:
    Type: AWS::IAM::Role
    Properties:
        Path: "/"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Sid: "AllowLambdaServiceToAssumeRole"
              Effect: "Allow"
              Action:
                - "sts:AssumeRole"
              Principal:
                Service:
                  - "lambda.amazonaws.com"
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: citycheckout-api
      StageName: prod
      CacheClusterEnabled: false
      # TODO: enable cache and move in-line definition to swagger.yml
      # CacheClusterSize: "0.5"
      # DefinitionUri: swagger.yml
      DefinitionBody:
        swagger: 2.0
        info:
          title: !Ref AWS::StackName
        paths:
          /api/{proxy+}:
            x-amazon-apigateway-any-method:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CityCheckoutFunction.Arn}/invocations
              responses: {}
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                type: mock
  CityCheckoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: citycheckout-api
      Handler: index.handler
      Runtime: nodejs6.10
      CodeUri: .
      Description: City Checkout API Lambda
      MemorySize: 512
      Timeout: 300
      Role: !GetAtt NetWorthLambdaRole.Arn
      Policies: AmazonDynamoDBFullAccess
      Events:
        GetApiProxyResource:
          Type: Api
          Properties:
            Path: /api/{proxy+}
            Method: any
            RestApiId: !Ref ApiGatewayApi
        # Timer:
        #   Type: Schedule
        #   Properties:
        #     Schedule: rate(5 minutes)
  CityCheckoutCronFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: citycheckout-api-cron
      Handler: index.postBackTaskHandler
      Runtime: nodejs6.10
      CodeUri: .
      Description: Postback in every 15 minutes for orders created about 45 minutes ago
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt NetWorthLambdaRole.Arn
      Events:
        ScheduledTimer:
          Type: Schedule
          Properties:
            Schedule: rate(15 minutes)

  OrderTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        -
          AttributeName: key
          KeyType: HASH
        -
          AttributeName: date
          KeyType: RANGE
      AttributeDefinitions:
        -
          AttributeName: "key"
          AttributeType: "S"
        -
          AttributeName: "date"
          AttributeType: "S"

      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  WriteCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 100
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref OrderTable
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  ScalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"
  WriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  # CustomerTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     KeySchema:
  #       -
  #         AttributeName: customer_id
  #         KeyType: HASH
  #       -
  #         AttributeName: date
  #         KeyType: RANGE
  #     AttributeDefinitions:
  #       -
  #         AttributeName: "customer_id"
  #         AttributeType: "S"
  #       -
  #         AttributeName: "date"
  #         AttributeType: "S"
  #
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 1
  #       WriteCapacityUnits: 1
